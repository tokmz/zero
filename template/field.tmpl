{{define "field"}}
// Code generated by github.com/tokmz/zero. DO NOT EDIT.

package {{.Package}}

import (
    "fmt"
    "gorm.io/gorm"
)

// Field 字段定义
type Field struct {
    Name  string      // 字段名
    Value interface{} // 字段值
}

// Eq 等于
func (f *Field) Eq(value interface{}) func(*gorm.DB) *gorm.DB {
    return func(db *gorm.DB) *gorm.DB {
        return db.Where(fmt.Sprintf("%s = ?", f.Name), value)
    }
}

// Neq 不等于
func (f *Field) Neq(value interface{}) func(*gorm.DB) *gorm.DB {
    return func(db *gorm.DB) *gorm.DB {
        return db.Where(fmt.Sprintf("%s <> ?", f.Name), value)
    }
}

// Gt 大于
func (f *Field) Gt(value interface{}) func(*gorm.DB) *gorm.DB {
    return func(db *gorm.DB) *gorm.DB {
        return db.Where(fmt.Sprintf("%s > ?", f.Name), value)
    }
}

// Gte 大于等于
func (f *Field) Gte(value interface{}) func(*gorm.DB) *gorm.DB {
    return func(db *gorm.DB) *gorm.DB {
        return db.Where(fmt.Sprintf("%s >= ?", f.Name), value)
    }
}

// Lt 小于
func (f *Field) Lt(value interface{}) func(*gorm.DB) *gorm.DB {
    return func(db *gorm.DB) *gorm.DB {
        return db.Where(fmt.Sprintf("%s < ?", f.Name), value)
    }
}

// Lte 小于等于
func (f *Field) Lte(value interface{}) func(*gorm.DB) *gorm.DB {
    return func(db *gorm.DB) *gorm.DB {
        return db.Where(fmt.Sprintf("%s <= ?", f.Name), value)
    }
}

// Like 模糊查询
func (f *Field) Like(value string) func(*gorm.DB) *gorm.DB {
    return func(db *gorm.DB) *gorm.DB {
        return db.Where(fmt.Sprintf("%s LIKE ?", f.Name), "%"+value+"%")
    }
}

// In 包含
func (f *Field) In(values ...interface{}) func(*gorm.DB) *gorm.DB {
    return func(db *gorm.DB) *gorm.DB {
        return db.Where(fmt.Sprintf("%s IN (?)", f.Name), values)
    }
}

// NotIn 不包含
func (f *Field) NotIn(values ...interface{}) func(*gorm.DB) *gorm.DB {
    return func(db *gorm.DB) *gorm.DB {
        return db.Where(fmt.Sprintf("%s NOT IN (?)", f.Name), values)
    }
}

// Between 范围查询
func (f *Field) Between(start, end interface{}) func(*gorm.DB) *gorm.DB {
    return func(db *gorm.DB) *gorm.DB {
        return db.Where(fmt.Sprintf("%s BETWEEN ? AND ?", f.Name), start, end)
    }
}

// IsNull 空值查询
func (f *Field) IsNull() func(*gorm.DB) *gorm.DB {
    return func(db *gorm.DB) *gorm.DB {
        return db.Where(fmt.Sprintf("%s IS NULL", f.Name))
    }
}

// IsNotNull 非空查询
func (f *Field) IsNotNull() func(*gorm.DB) *gorm.DB {
    return func(db *gorm.DB) *gorm.DB {
        return db.Where(fmt.Sprintf("%s IS NOT NULL", f.Name))
    }
}

// OrderAsc 正序
func (f *Field) OrderAsc() func(*gorm.DB) *gorm.DB {
    return func(db *gorm.DB) *gorm.DB {
        return db.Order(fmt.Sprintf("%s ASC", f.Name))
    }
}

// OrderDesc 倒序
func (f *Field) OrderDesc() func(*gorm.DB) *gorm.DB {
    return func(db *gorm.DB) *gorm.DB {
        return db.Order(fmt.Sprintf("%s DESC", f.Name))
    }
}

// FindInSet FIND_IN_SET查询
func (f *Field) FindInSet(value interface{}) func(*gorm.DB) *gorm.DB {
    return func(db *gorm.DB) *gorm.DB {
        return db.Where("FIND_IN_SET(?, "+f.Name+")", value)
    }
}
{{end}} 