{{define "query"}}
// Code generated by github.com/tokmz/zero. DO NOT EDIT.

package {{.Package}}

import (
	"context"
	"errors"
	"fmt"
	"time"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
)

// {{.TableName | ToCamel}}Query 查询结构体
type {{.TableName | ToCamel}}Query struct {
	db *gorm.DB
	table string
}

// New{{.TableName | ToCamel}}Query 创建查询对象
func New{{.TableName | ToCamel}}Query(db *gorm.DB) *{{.TableName | ToCamel}}Query {
	return &{{.TableName | ToCamel}}Query{
		db: db.Model(&{{.TableName | ToCamel}}{}),
		table: "{{.TableName}}",
	}
}

// WithContext 设置上下文
func (q *{{.TableName | ToCamel}}Query) WithContext(ctx context.Context) *{{.TableName | ToCamel}}Query {
	q.db = q.db.WithContext(ctx)
	return q
}

// Transaction 事务
func (q *{{.TableName | ToCamel}}Query) Transaction(fc func(tx *{{.TableName | ToCamel}}Query) error) error {
	return q.db.Transaction(func(tx *gorm.DB) error {
		return fc(New{{.TableName | ToCamel}}Query(tx))
	})
}

// First 获取第一条记录
func (q *{{.TableName | ToCamel}}Query) First() (*{{.TableName | ToCamel}}, error) {
	var result {{.TableName | ToCamel}}
	err := q.db.First(&result).Error
	return &result, err
}

// Take 获取一条记录
func (q *{{.TableName | ToCamel}}Query) Take() (*{{.TableName | ToCamel}}, error) {
	var result {{.TableName | ToCamel}}
	err := q.db.Take(&result).Error
	return &result, err
}

// Last 获取最后一条记录
func (q *{{.TableName | ToCamel}}Query) Last() (*{{.TableName | ToCamel}}, error) {
	var result {{.TableName | ToCamel}}
	err := q.db.Last(&result).Error
	return &result, err
}

// Find 查询多条记录
func (q *{{.TableName | ToCamel}}Query) Find() ([]*{{.TableName | ToCamel}}, error) {
	var results []*{{.TableName | ToCamel}}
	err := q.db.Find(&results).Error
	return results, err
}

// FindInBatches 批量查询
func (q *{{.TableName | ToCamel}}Query) FindInBatches(batchSize int, fc func(tx *gorm.DB, batch int) error) error {
	return q.db.FindInBatches(&[]*{{.TableName | ToCamel}}{}, batchSize, fc).Error
}

// FirstOrCreate 获取第一条记录，不存在则创建
func (q *{{.TableName | ToCamel}}Query) FirstOrCreate(data *{{.TableName | ToCamel}}) error {
	return q.db.FirstOrCreate(data).Error
}

// Save 保存
func (q *{{.TableName | ToCamel}}Query) Save(data *{{.TableName | ToCamel}}) error {
	return q.db.Save(data).Error
}

// Create 创建
func (q *{{.TableName | ToCamel}}Query) Create(data *{{.TableName | ToCamel}}) error {
	return q.db.Create(data).Error
}

// CreateInBatches 批量创建
func (q *{{.TableName | ToCamel}}Query) CreateInBatches(data []*{{.TableName | ToCamel}}, batchSize int) error {
	return q.db.CreateInBatches(data, batchSize).Error
}

// Delete 删除
func (q *{{.TableName | ToCamel}}Query) Delete() error {
	return q.db.Delete(&{{.TableName | ToCamel}}{}).Error
}

// Update 更新
func (q *{{.TableName | ToCamel}}Query) Update(column string, value interface{}) error {
	return q.db.Update(column, value).Error
}

// Updates 批量更新
func (q *{{.TableName | ToCamel}}Query) Updates(values interface{}) error {
	return q.db.Updates(values).Error
}

// UpdateColumn 更新列
func (q *{{.TableName | ToCamel}}Query) UpdateColumn(column string, value interface{}) error {
	return q.db.UpdateColumn(column, value).Error
}

// Where 条件查询
func (q *{{.TableName | ToCamel}}Query) Where(query interface{}, args ...interface{}) *{{.TableName | ToCamel}}Query {
	q.db = q.db.Where(query, args...)
	return q
}

// Or 或条件
func (q *{{.TableName | ToCamel}}Query) Or(query interface{}, args ...interface{}) *{{.TableName | ToCamel}}Query {
	q.db = q.db.Or(query, args...)
	return q
}

// Not 非条件
func (q *{{.TableName | ToCamel}}Query) Not(query interface{}, args ...interface{}) *{{.TableName | ToCamel}}Query {
	q.db = q.db.Not(query, args...)
	return q
}

// Order 排序
func (q *{{.TableName | ToCamel}}Query) Order(value interface{}) *{{.TableName | ToCamel}}Query {
	q.db = q.db.Order(value)
	return q
}

// Select 选择字段
func (q *{{.TableName | ToCamel}}Query) Select(query interface{}, args ...interface{}) *{{.TableName | ToCamel}}Query {
	q.db = q.db.Select(query, args...)
	return q
}

// Omit 忽略字段
func (q *{{.TableName | ToCamel}}Query) Omit(columns ...string) *{{.TableName | ToCamel}}Query {
	q.db = q.db.Omit(columns...)
	return q
}

// Limit 限制条数
func (q *{{.TableName | ToCamel}}Query) Limit(limit int) *{{.TableName | ToCamel}}Query {
	q.db = q.db.Limit(limit)
	return q
}

// Offset 偏移量
func (q *{{.TableName | ToCamel}}Query) Offset(offset int) *{{.TableName | ToCamel}}Query {
	q.db = q.db.Offset(offset)
	return q
}

// Scopes 作用域
func (q *{{.TableName | ToCamel}}Query) Scopes(funcs ...func(*gorm.DB) *gorm.DB) *{{.TableName | ToCamel}}Query {
	q.db = q.db.Scopes(funcs...)
	return q
}

// Unscoped 取消软删除
func (q *{{.TableName | ToCamel}}Query) Unscoped() *{{.TableName | ToCamel}}Query {
	q.db = q.db.Unscoped()
	return q
}

// Count 统计
func (q *{{.TableName | ToCamel}}Query) Count() (int64, error) {
	var count int64
	err := q.db.Count(&count).Error
	return count, err
}

// Exists 是否存在
func (q *{{.TableName | ToCamel}}Query) Exists() (bool, error) {
	count, err := q.Count()
	return count > 0, err
}

// ScanList 扫描列表
func (q *{{.TableName | ToCamel}}Query) ScanList(dest interface{}) error {
	return q.db.Scan(dest).Error
}

// Pluck 获取单个列
func (q *{{.TableName | ToCamel}}Query) Pluck(column string, dest interface{}) error {
	return q.db.Pluck(column, dest).Error
}

// Distinct 去重
func (q *{{.TableName | ToCamel}}Query) Distinct(args ...interface{}) *{{.TableName | ToCamel}}Query {
	q.db = q.db.Distinct(args...)
	return q
}

// Group 分组
func (q *{{.TableName | ToCamel}}Query) Group(name string) *{{.TableName | ToCamel}}Query {
	q.db = q.db.Group(name)
	return q
}

// Having 分组条件
func (q *{{.TableName | ToCamel}}Query) Having(query interface{}, args ...interface{}) *{{.TableName | ToCamel}}Query {
	q.db = q.db.Having(query, args...)
	return q
}

// Joins 连表查询
func (q *{{.TableName | ToCamel}}Query) Joins(query string, args ...interface{}) *{{.TableName | ToCamel}}Query {
	q.db = q.db.Joins(query, args...)
	return q
}

// Preload 预加载
func (q *{{.TableName | ToCamel}}Query) Preload(query string, args ...interface{}) *{{.TableName | ToCamel}}Query {
	q.db = q.db.Preload(query, args...)
	return q
}

// FindByPage 分页查询
func (q *{{.TableName | ToCamel}}Query) FindByPage(page, size int) ([]*{{.TableName | ToCamel}}, int64, error) {
	var total int64
	var list []*{{.TableName | ToCamel}}

	err := q.db.Transaction(func(tx *gorm.DB) error {
		// 统计总数
		if err := tx.Count(&total).Error; err != nil {
			return err
		}

		// 获取数据
		offset := (page - 1) * size
		if err := tx.Offset(offset).Limit(size).Find(&list).Error; err != nil {
			return err
		}

		return nil
	})

	return list, total, err
}

{{- range .Fields}}
// Where{{.Name | ToCamel}} {{if .Comment}}{{.Comment}}{{else}}按 {{.Name}} 查询{{end}}
func (q *{{$.TableName | ToCamel}}Query) Where{{.Name | ToCamel}}({{.Name | ToLowerCamel}} {{.Type}}) *{{$.TableName | ToCamel}}Query {
	q.db = q.db.Where("{{.Name}} = ?", {{.Name | ToLowerCamel}})
	return q
}

// Where{{.Name | ToCamel}}In {{if .Comment}}{{.Comment}}{{else}}按 {{.Name}} IN 查询{{end}}
func (q *{{$.TableName | ToCamel}}Query) Where{{.Name | ToCamel}}In({{.Name | ToLowerCamel}}List []{{.Type}}) *{{$.TableName | ToCamel}}Query {
	q.db = q.db.Where("{{.Name}} IN ?", {{.Name | ToLowerCamel}}List)
	return q
}
{{- end}}
{{end}} 