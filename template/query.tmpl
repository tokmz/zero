{{define "query"}}
// Code generated by github.com/tokmz/zero. DO NOT EDIT.
// Generated at: {{now "2006-01-02 15:04:05"}}

package {{.Package}}

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
)

// {{.ModelName | toLowerCamel}}Query {{.Comment}}查询
type {{.ModelName | toLowerCamel}}Query struct {
	db *gorm.DB
}

// Use 使用指定的数据库连接
func (q *{{.ModelName | toLowerCamel}}Query) Use(db *gorm.DB) *{{.ModelName | toLowerCamel}}Query {
	q.db = db
	return q
}

// Session 创建新会话
func (q *{{.ModelName | toLowerCamel}}Query) Session(config *gorm.Session) *{{.ModelName | toLowerCamel}}Query {
	q.db = q.db.Session(config)
	return q
}

// WithContext 设置上下文
func (q *{{.ModelName | toLowerCamel}}Query) WithContext(ctx context.Context) *{{.ModelName | toLowerCamel}}Query {
	q.db = q.db.WithContext(ctx)
	return q
}

// UnderlyingDB 获取底层数据库连接
func (q *{{.ModelName | toLowerCamel}}Query) UnderlyingDB() *gorm.DB {
	return q.db
}

// Clauses 添加条件
func (q *{{.ModelName | toLowerCamel}}Query) Clauses(conds ...clause.Expression) *{{.ModelName | toLowerCamel}}Query {
	q.db = q.db.Clauses(conds...)
	return q
}

// Not 非条件
func (q *{{.ModelName | toLowerCamel}}Query) Not(query interface{}, args ...interface{}) *{{.ModelName | toLowerCamel}}Query {
	q.db = q.db.Not(query, args...)
	return q
}

// Or 或条件
func (q *{{.ModelName | toLowerCamel}}Query) Or(query interface{}, args ...interface{}) *{{.ModelName | toLowerCamel}}Query {
	q.db = q.db.Or(query, args...)
	return q
}

// Select 选择字段
func (q *{{.ModelName | toLowerCamel}}Query) Select(query interface{}, args ...interface{}) *{{.ModelName | toLowerCamel}}Query {
	q.db = q.db.Select(query, args...)
	return q
}

// Where 条件查询
func (q *{{.ModelName | toLowerCamel}}Query) Where(query interface{}, args ...interface{}) *{{.ModelName | toLowerCamel}}Query {
	q.db = q.db.Where(query, args...)
	return q
}

// Order 排序
func (q *{{.ModelName | toLowerCamel}}Query) Order(value interface{}) *{{.ModelName | toLowerCamel}}Query {
	q.db = q.db.Order(value)
	return q
}

// Distinct 去重
func (q *{{.ModelName | toLowerCamel}}Query) Distinct(args ...interface{}) *{{.ModelName | toLowerCamel}}Query {
	q.db = q.db.Distinct(args...)
	return q
}

// Omit 忽略字段
func (q *{{.ModelName | toLowerCamel}}Query) Omit(columns ...string) *{{.ModelName | toLowerCamel}}Query {
	q.db = q.db.Omit(columns...)
	return q
}

// Join 连接查询
func (q *{{.ModelName | toLowerCamel}}Query) Join(query string, args ...interface{}) *{{.ModelName | toLowerCamel}}Query {
	q.db = q.db.Joins(query, args...)
	return q
}

// LeftJoin 左连接
func (q *{{.ModelName | toLowerCamel}}Query) LeftJoin(query string, args ...interface{}) *{{.ModelName | toLowerCamel}}Query {
	q.db = q.db.Joins("LEFT JOIN "+query, args...)
	return q
}

// RightJoin 右连接
func (q *{{.ModelName | toLowerCamel}}Query) RightJoin(query string, args ...interface{}) *{{.ModelName | toLowerCamel}}Query {
	q.db = q.db.Joins("RIGHT JOIN "+query, args...)
	return q
}

// Group 分组
func (q *{{.ModelName | toLowerCamel}}Query) Group(name string) *{{.ModelName | toLowerCamel}}Query {
	q.db = q.db.Group(name)
	return q
}

// Having 分组条件
func (q *{{.ModelName | toLowerCamel}}Query) Having(query interface{}, args ...interface{}) *{{.ModelName | toLowerCamel}}Query {
	q.db = q.db.Having(query, args...)
	return q
}

// Limit 限制条数
func (q *{{.ModelName | toLowerCamel}}Query) Limit(limit int) *{{.ModelName | toLowerCamel}}Query {
	q.db = q.db.Limit(limit)
	return q
}

// Offset 偏移量
func (q *{{.ModelName | toLowerCamel}}Query) Offset(offset int) *{{.ModelName | toLowerCamel}}Query {
	q.db = q.db.Offset(offset)
	return q
}

// Unscoped 取消软删除
func (q *{{.ModelName | toLowerCamel}}Query) Unscoped() *{{.ModelName | toLowerCamel}}Query {
	q.db = q.db.Unscoped()
	return q
}

// Scopes 作用域
func (q *{{.ModelName | toLowerCamel}}Query) Scopes(funcs ...func(*gorm.DB) *gorm.DB) *{{.ModelName | toLowerCamel}}Query {
	q.db = q.db.Scopes(funcs...)
	return q
}

// Preload 预加载
func (q *{{.ModelName | toLowerCamel}}Query) Preload(query string, args ...interface{}) *{{.ModelName | toLowerCamel}}Query {
	q.db = q.db.Preload(query, args...)
	return q
}

// First 获取第一条记录
func (q *{{.ModelName | toLowerCamel}}Query) First() (*{{.ModelName}}, error) {
	var result {{.ModelName}}
	err := q.db.First(&result).Error
	return &result, err
}

// Take 获取一条记录
func (q *{{.ModelName | toLowerCamel}}Query) Take() (*{{.ModelName}}, error) {
	var result {{.ModelName}}
	err := q.db.Take(&result).Error
	return &result, err
}

// Last 获取最后一条记录
func (q *{{.ModelName | toLowerCamel}}Query) Last() (*{{.ModelName}}, error) {
	var result {{.ModelName}}
	err := q.db.Last(&result).Error
	return &result, err
}

// Find 查询多条记录
func (q *{{.ModelName | toLowerCamel}}Query) Find() ([]*{{.ModelName}}, error) {
	var results []*{{.ModelName}}
	err := q.db.Find(&results).Error
	return results, err
}

// FindInBatches 批量查询
func (q *{{.ModelName | toLowerCamel}}Query) FindInBatches(result *[]*{{.ModelName}}, batchSize int, fc func(*gorm.DB, int) error) error {
	return q.db.FindInBatches(result, batchSize, fc).Error
}

// FirstOrInit 获取第一条记录，不存在则初始化
func (q *{{.ModelName | toLowerCamel}}Query) FirstOrInit() (*{{.ModelName}}, error) {
	var result {{.ModelName}}
	err := q.db.FirstOrInit(&result).Error
	return &result, err
}

// FirstOrCreate 获取第一条记录，不存在则创建
func (q *{{.ModelName | toLowerCamel}}Query) FirstOrCreate() (*{{.ModelName}}, error) {
	var result {{.ModelName}}
	err := q.db.FirstOrCreate(&result).Error
	return &result, err
}

// Count 统计记录数
func (q *{{.ModelName | toLowerCamel}}Query) Count() (int64, error) {
	var count int64
	err := q.db.Model(&{{.ModelName}}{}).Count(&count).Error
	return count, err
}

// Create 创建记录
func (q *{{.ModelName | toLowerCamel}}Query) Create(data *{{.ModelName}}) error {
	return q.db.Create(data).Error
}

// CreateInBatches 批量创建
func (q *{{.ModelName | toLowerCamel}}Query) CreateInBatches(values []*{{.ModelName}}, batchSize int) error {
	return q.db.CreateInBatches(values, batchSize).Error
}

// Save 保存记录
func (q *{{.ModelName | toLowerCamel}}Query) Save(data *{{.ModelName}}) error {
	return q.db.Save(data).Error
}

// Delete 删除记录
func (q *{{.ModelName | toLowerCamel}}Query) Delete(data *{{.ModelName}}) error {
	return q.db.Delete(data).Error
}

// Update 更新单个字段
func (q *{{.ModelName | toLowerCamel}}Query) Update(column string, value interface{}) error {
	return q.db.Model(&{{.ModelName}}{}).Update(column, value).Error
}

// Updates 更新多个字段
func (q *{{.ModelName | toLowerCamel}}Query) Updates(values interface{}) error {
	return q.db.Model(&{{.ModelName}}{}).Updates(values).Error
}

// UpdateColumn 更新单个字段(忽略钩子)
func (q *{{.ModelName | toLowerCamel}}Query) UpdateColumn(column string, value interface{}) error {
	return q.db.Model(&{{.ModelName}}{}).UpdateColumn(column, value).Error
}

// UpdateColumns 更新多个字段(忽略钩子)
func (q *{{.ModelName | toLowerCamel}}Query) UpdateColumns(values interface{}) error {
	return q.db.Model(&{{.ModelName}}{}).UpdateColumns(values).Error
}

// Pluck 查询单个列
func (q *{{.ModelName | toLowerCamel}}Query) Pluck(column string, dest interface{}) error {
	return q.db.Model(&{{.ModelName}}{}).Pluck(column, dest).Error
}

// Scan 扫描结果
func (q *{{.ModelName | toLowerCamel}}Query) Scan(dest interface{}) error {
	return q.db.Model(&{{.ModelName}}{}).Scan(dest).Error
}

// FindByPage 分页查询
func (q *{{.ModelName | toLowerCamel}}Query) FindByPage(page, size int) ([]*{{.ModelName}}, int64, error) {
	var total int64
	var results []*{{.ModelName}}

	err := q.db.Transaction(func(tx *gorm.DB) error {
		// 统计总数
		if err := tx.Model(&{{.ModelName}}{}).Count(&total).Error; err != nil {
			return err
		}

		// 查询数据
		if err := tx.Offset(page).Limit(size).Find(&results).Error; err != nil {
			return err
		}

		return nil
	})

	return results, total, err
}

// ScanByPage 分页扫描
func (q *{{.ModelName | toLowerCamel}}Query) ScanByPage(result interface{}, page, size int) (int64, error) {
	var total int64

	err := q.db.Transaction(func(tx *gorm.DB) error {
		// 统计总数
		if err := tx.Model(&{{.ModelName}}{}).Count(&total).Error; err != nil {
			return err
		}

		// 扫描数据
		if err := tx.Offset((page - 1) * size).Limit(size).Scan(result).Error; err != nil {
			return err
		}

		return nil
	})

	return total, err
}
{{end}}