{{define "query"}}
// Code generated by github.com/tokmz/zero. DO NOT EDIT.

package {{.Package}}

import (
	"context"
	"time"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"

	"{{.ModuleName}}/{{.ModelPath}}"
)

// {{.TableName | ToCamel}}Query {{.Comment}}查询结构体
type {{.TableName | ToCamel}}Query struct {
	db *gorm.DB
}

// clone 克隆查询对象
func (q *{{.TableName | ToCamel}}Query) clone() *{{.TableName | ToCamel}}Query {
	return &{{.TableName | ToCamel}}Query{
		db: q.db.Session(&gorm.Session{}),
	}
}

// New{{.TableName | ToCamel}}Query 创建{{.Comment}}查询对象
func New{{.TableName | ToCamel}}Query(db *gorm.DB) *{{.TableName | ToCamel}}Query {
	return &{{.TableName | ToCamel}}Query{
		db: db.Model(&model.{{.TableName | ToCamel}}{}),
	}
}

// WithContext 设置上下文
func (q *{{.TableName | ToCamel}}Query) WithContext(ctx context.Context) *{{.TableName | ToCamel}}Query {
	return &{{.TableName | ToCamel}}Query{
		db: q.db.WithContext(ctx),
	}
}

// Debug 启用调试模式
func (q *{{.TableName | ToCamel}}Query) Debug() *{{.TableName | ToCamel}}Query {
	return &{{.TableName | ToCamel}}Query{
		db: q.db.Debug(),
	}
}

// First 获取第一条记录
func (q *{{.TableName | ToCamel}}Query) First() (*model.{{.TableName | ToCamel}}, error) {
	var result model.{{.TableName | ToCamel}}
	err := q.db.First(&result).Error
	return &result, err
}

// Take 获取一条记录，不指定排序
func (q *{{.TableName | ToCamel}}Query) Take() (*model.{{.TableName | ToCamel}}, error) {
	var result model.{{.TableName | ToCamel}}
	err := q.db.Take(&result).Error
	return &result, err
}

// Last 获取最后一条记录
func (q *{{.TableName | ToCamel}}Query) Last() (*model.{{.TableName | ToCamel}}, error) {
	var result model.{{.TableName | ToCamel}}
	err := q.db.Last(&result).Error
	return &result, err
}

// Find 查询多条记录
func (q *{{.TableName | ToCamel}}Query) Find() ([]*model.{{.TableName | ToCamel}}, error) {
	var results []*model.{{.TableName | ToCamel}}
	err := q.db.Find(&results).Error
	return results, err
}

// FindInBatches 批量查询
func (q *{{.TableName | ToCamel}}Query) FindInBatches(dest interface{}, batchSize int, fc func(tx *gorm.DB, batch int) error) error {
	return q.db.FindInBatches(dest, batchSize, fc).Error
}

// FirstOrInit 获取第一条记录，不存在则初始化
func (q *{{.TableName | ToCamel}}Query) FirstOrInit() (*model.{{.TableName | ToCamel}}, error) {
	var result model.{{.TableName | ToCamel}}
	err := q.db.FirstOrInit(&result).Error
	return &result, err
}

// FirstOrCreate 获取第一条记录，不存在则创建
func (q *{{.TableName | ToCamel}}Query) FirstOrCreate() (*model.{{.TableName | ToCamel}}, error) {
	var result model.{{.TableName | ToCamel}}
	err := q.db.FirstOrCreate(&result).Error
	return &result, err
}

// Count 统计记录数
func (q *{{.TableName | ToCamel}}Query) Count() (int64, error) {
	var count int64
	err := q.db.Count(&count).Error
	return count, err
}

// Distinct 去重查询
func (q *{{.TableName | ToCamel}}Query) Distinct(columns ...string) *{{.TableName | ToCamel}}Query {
	q.db = q.db.Distinct(columns)
	return q
}

// Select 指定查询字段
func (q *{{.TableName | ToCamel}}Query) Select(query interface{}, args ...interface{}) *{{.TableName | ToCamel}}Query {
	q.db = q.db.Select(query, args...)
	return q
}

// Where 添加查询条件
func (q *{{.TableName | ToCamel}}Query) Where(query interface{}, args ...interface{}) *{{.TableName | ToCamel}}Query {
	return &{{.TableName | ToCamel}}Query{
		db: q.db.Where(query, args...),
	}
}

// Or 添加 OR 查询条件
func (q *{{.TableName | ToCamel}}Query) Or(query interface{}, args ...interface{}) *{{.TableName | ToCamel}}Query {
	return &{{.TableName | ToCamel}}Query{
		db: q.db.Or(query, args...),
	}
}

// Not 添加 NOT 查询条件
func (q *{{.TableName | ToCamel}}Query) Not(query interface{}, args ...interface{}) *{{.TableName | ToCamel}}Query {
	return &{{.TableName | ToCamel}}Query{
		db: q.db.Not(query, args...),
	}
}

// Order 指定排序
func (q *{{.TableName | ToCamel}}Query) Order(value interface{}) *{{.TableName | ToCamel}}Query {
	return &{{.TableName | ToCamel}}Query{
		db: q.db.Order(value),
	}
}

// Limit 指定返回记录数
func (q *{{.TableName | ToCamel}}Query) Limit(limit int) *{{.TableName | ToCamel}}Query {
	return &{{.TableName | ToCamel}}Query{
		db: q.db.Limit(limit),
	}
}

// Offset 指定偏移量
func (q *{{.TableName | ToCamel}}Query) Offset(offset int) *{{.TableName | ToCamel}}Query {
	return &{{.TableName | ToCamel}}Query{
		db: q.db.Offset(offset),
	}
}

// Scopes 添加查询作用域
func (q *{{.TableName | ToCamel}}Query) Scopes(funcs ...func(*gorm.DB) *gorm.DB) *{{.TableName | ToCamel}}Query {
	return &{{.TableName | ToCamel}}Query{
		db: q.db.Scopes(funcs...),
	}
}

// Preload 预加载关联
func (q *{{.TableName | ToCamel}}Query) Preload(query string, args ...interface{}) *{{.TableName | ToCamel}}Query {
	return &{{.TableName | ToCamel}}Query{
		db: q.db.Preload(query, args...),
	}
}

// Joins 添加连接查询
func (q *{{.TableName | ToCamel}}Query) Joins(query string, args ...interface{}) *{{.TableName | ToCamel}}Query {
	return &{{.TableName | ToCamel}}Query{
		db: q.db.Joins(query, args...),
	}
}

// Group 添加分组
func (q *{{.TableName | ToCamel}}Query) Group(name string) *{{.TableName | ToCamel}}Query {
	return &{{.TableName | ToCamel}}Query{
		db: q.db.Group(name),
	}
}

// Having 添加分组条件
func (q *{{.TableName | ToCamel}}Query) Having(query interface{}, args ...interface{}) *{{.TableName | ToCamel}}Query {
	return &{{.TableName | ToCamel}}Query{
		db: q.db.Having(query, args...),
	}
}

// Create 创建记录
func (q *{{.TableName | ToCamel}}Query) Create(data *model.{{.TableName | ToCamel}}) error {
	return q.db.Create(data).Error
}

// CreateInBatches 批量创建记录
func (q *{{.TableName | ToCamel}}Query) CreateInBatches(data []*model.{{.TableName | ToCamel}}, batchSize int) error {
	return q.db.CreateInBatches(data, batchSize).Error
}

// Save 保存记录
func (q *{{.TableName | ToCamel}}Query) Save(data *model.{{.TableName | ToCamel}}) error {
	return q.db.Save(data).Error
}

// Update 更新记录
func (q *{{.TableName | ToCamel}}Query) Update(column string, value interface{}) error {
	return q.db.Update(column, value).Error
}

// Updates 批量更新
func (q *{{.TableName | ToCamel}}Query) Updates(values interface{}) error {
	return q.db.Updates(values).Error
}

// UpdateColumn 更新指定列
func (q *{{.TableName | ToCamel}}Query) UpdateColumn(column string, value interface{}) error {
	return q.db.UpdateColumn(column, value).Error
}

// UpdateColumns 更新多个列
func (q *{{.TableName | ToCamel}}Query) UpdateColumns(values interface{}) error {
	return q.db.UpdateColumns(values).Error
}

// Delete 删除记录
func (q *{{.TableName | ToCamel}}Query) Delete(data ...*model.{{.TableName | ToCamel}}) error {
	if len(data) == 0 {
		return q.db.Delete(&model.{{.TableName | ToCamel}}{}).Error
	}
	return q.db.Delete(data).Error
}

// ForUpdate 添加 FOR UPDATE 锁
func (q *{{.TableName | ToCamel}}Query) ForUpdate() *{{.TableName | ToCamel}}Query {
	q.db = q.db.Clauses(clause.Locking{Strength: "UPDATE"})
	return q
}

// ForShare 添加 FOR SHARE 锁
func (q *{{.TableName | ToCamel}}Query) ForShare() *{{.TableName | ToCamel}}Query {
	q.db = q.db.Clauses(clause.Locking{Strength: "SHARE"})
	return q
}

// Transaction 执行事务
func (q *{{.TableName | ToCamel}}Query) Transaction(fc func(tx *{{.TableName | ToCamel}}Query) error) error {
	return q.db.Transaction(func(tx *gorm.DB) error {
		return fc(New{{.TableName | ToCamel}}Query(tx))
	})
}

// Begin 开启事务
func (q *{{.TableName | ToCamel}}Query) Begin() *{{.TableName | ToCamel}}Query {
	return New{{.TableName | ToCamel}}Query(q.db.Begin())
}

// Commit 提交事务
func (q *{{.TableName | ToCamel}}Query) Commit() error {
	return q.db.Commit().Error
}

// Rollback 回滚事务
func (q *{{.TableName | ToCamel}}Query) Rollback() error {
	return q.db.Rollback().Error
}

// RollbackTo 回滚到指定保存点
func (q *{{.TableName | ToCamel}}Query) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}

// SavePoint 创建保存点
func (q *{{.TableName | ToCamel}}Query) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

{{- if .Relations}}
{{- range .Relations}}
{{- if eq .Type "has_one"}}
// With{{.Name | ToCamel}} 预加载{{.Comment}}关联
func (q *{{$.TableName | ToCamel}}Query) With{{.Name | ToCamel}}() *{{$.TableName | ToCamel}}Query {
	q.db = q.db.Preload("{{.Name | ToCamel}}")
	return q
}

{{- else if eq .Type "belongs_to"}}
// With{{.Name | ToCamel}} 预加载{{.Comment}}关联
func (q *{{$.TableName | ToCamel}}Query) With{{.Name | ToCamel}}() *{{$.TableName | ToCamel}}Query {
	q.db = q.db.Preload("{{.Name | ToCamel}}")
	return q
}

{{- else if eq .Type "has_many"}}
// With{{.Name | ToCamel}} 预加载{{.Comment}}关联
func (q *{{$.TableName | ToCamel}}Query) With{{.Name | ToCamel}}() *{{$.TableName | ToCamel}}Query {
	q.db = q.db.Preload("{{.Name | ToCamel}}")
	return q
}

// Join{{.Name | ToCamel}} 连接{{.Comment}}查询
func (q *{{$.TableName | ToCamel}}Query) Join{{.Name | ToCamel}}() *{{$.TableName | ToCamel}}Query {
	q.db = q.db.Joins("{{.Name | ToCamel}}")
	return q
}

{{- else if eq .Type "many2many"}}
// With{{.Name | ToCamel}} 预加载{{.Comment}}关联
func (q *{{$.TableName | ToCamel}}Query) With{{.Name | ToCamel}}() *{{$.TableName | ToCamel}}Query {
	q.db = q.db.Preload("{{.Name | ToCamel}}")
	return q
}

// Join{{.Name | ToCamel}} 连接{{.Comment}}查询
func (q *{{$.TableName | ToCamel}}Query) Join{{.Name | ToCamel}}() *{{$.TableName | ToCamel}}Query {
	q.db = q.db.Joins("{{.Name | ToCamel}}")
	return q
}
{{- end}}
{{- end}}
{{- end}}

{{- range .Fields}}
// Where{{.Name | ToCamel}} 根据 {{.Name}} 字段添加查询条件
func (q *{{$.TableName | ToCamel}}Query) Where{{.Name | ToCamel}}(value {{.Type}}) *{{$.TableName | ToCamel}}Query {
	return &{{$.TableName | ToCamel}}Query{
		db: q.db.Where("{{.Name}} = ?", value),
	}
}

// Where{{.Name | ToCamel}}In 根据 {{.Name}} 字段添加 IN 查询条件
func (q *{{$.TableName | ToCamel}}Query) Where{{.Name | ToCamel}}In(values []{{.Type}}) *{{$.TableName | ToCamel}}Query {
	return &{{$.TableName | ToCamel}}Query{
		db: q.db.Where("{{.Name}} IN ?", values),
	}
}

// Where{{.Name | ToCamel}}NotIn 根据 {{.Name}} 字段添加 NOT IN 查询条件
func (q *{{$.TableName | ToCamel}}Query) Where{{.Name | ToCamel}}NotIn(values []{{.Type}}) *{{$.TableName | ToCamel}}Query {
	return &{{$.TableName | ToCamel}}Query{
		db: q.db.Where("{{.Name}} NOT IN ?", values),
	}
}

{{- if or (Contains .Type "int") (Contains .Type "float")}}
// Where{{.Name | ToCamel}}GT 根据 {{.Name}} 字段添加大于查询条件
func (q *{{$.TableName | ToCamel}}Query) Where{{.Name | ToCamel}}GT(value {{.Type}}) *{{$.TableName | ToCamel}}Query {
	return &{{$.TableName | ToCamel}}Query{
		db: q.db.Where("{{.Name}} > ?", value),
	}
}

// Where{{.Name | ToCamel}}GTE 根据 {{.Name}} 字段添加大于等于查询条件
func (q *{{$.TableName | ToCamel}}Query) Where{{.Name | ToCamel}}GTE(value {{.Type}}) *{{$.TableName | ToCamel}}Query {
	return &{{$.TableName | ToCamel}}Query{
		db: q.db.Where("{{.Name}} >= ?", value),
	}
}

// Where{{.Name | ToCamel}}LT 根据 {{.Name}} 字段添加小于查询条件
func (q *{{$.TableName | ToCamel}}Query) Where{{.Name | ToCamel}}LT(value {{.Type}}) *{{$.TableName | ToCamel}}Query {
	return &{{$.TableName | ToCamel}}Query{
		db: q.db.Where("{{.Name}} < ?", value),
	}
}

// Where{{.Name | ToCamel}}LTE 根据 {{.Name}} 字段添加小于等于查询条件
func (q *{{$.TableName | ToCamel}}Query) Where{{.Name | ToCamel}}LTE(value {{.Type}}) *{{$.TableName | ToCamel}}Query {
	return &{{$.TableName | ToCamel}}Query{
		db: q.db.Where("{{.Name}} <= ?", value),
	}
}

// Where{{.Name | ToCamel}}Between 根据 {{.Name}} 字段添加范围查询条件
func (q *{{$.TableName | ToCamel}}Query) Where{{.Name | ToCamel}}Between(min, max {{.Type}}) *{{$.TableName | ToCamel}}Query {
	return &{{$.TableName | ToCamel}}Query{
		db: q.db.Where("{{.Name}} BETWEEN ? AND ?", min, max),
	}
}
{{- end}}

{{- if eq .Type "string"}}
// Where{{.Name | ToCamel}}Like 根据 {{.Name}} 字段添加模糊查询条件
func (q *{{$.TableName | ToCamel}}Query) Where{{.Name | ToCamel}}Like(value string) *{{$.TableName | ToCamel}}Query {
	return &{{$.TableName | ToCamel}}Query{
		db: q.db.Where("{{.Name}} LIKE ?", "%"+value+"%"),
	}
}
{{- end}}

{{- if eq .Type "time.Time"}}
// Where{{.Name | ToCamel}}Between 根据 {{.Name}} 字段添加时间范围查询条件
func (q *{{$.TableName | ToCamel}}Query) Where{{.Name | ToCamel}}Between(start, end time.Time) *{{$.TableName | ToCamel}}Query {
	return &{{$.TableName | ToCamel}}Query{
		db: q.db.Where("{{.Name}} BETWEEN ? AND ?", start, end),
	}
}
{{- end}}
{{- end}}
{{end}} 